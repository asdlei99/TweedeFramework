include(CheckCXXCompilerFlag)

if ("${PROJECT_SOURCE_DIR}" STREQUAL "${CMAKE_SOURCE_DIR}")
	set(TE_TOP_LEVEL True)
endif ()

# Configuration types
if (NOT CMAKE_CONFIGURATION_TYPES) # Multiconfig generator?
	if (NOT CMAKE_BUILD_TYPE)
		message(STATUS "Defaulting to release build.")
		set_property(CACHE CMAKE_BUILD_TYPE PROPERTY VALUE "Release")
	endif ()
endif ()

# Includes required for various find_package calls
set (CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${TE_SOURCE_DIR}/CMake/Modules/")

if (${CMAKE_SIZEOF_VOID_P} EQUAL 8)
	set(TE_64BIT true)
endif ()

if (UNIX AND NOT APPLE)
	set (LINUX TRUE)
endif ()

# Global compile & linker flags
## Compiler-agnostic settings
### Target at least C++14
set (CMAKE_CXX_STANDARD 14)
set (CMAKE_CXX_STANDARD_REQUIRED TRUE)

set (CMAKE_INSTALL_RPATH "\$ORIGIN")

## Compiler-specific settings
if (MSVC)
elseif(CMAKE_CXX_COMPILER_ID MATCHES "Clang" OR CMAKE_CXX_COMPILER_ID MATCHES "AppleClang")
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
else ()
endif ()

# Enable colored output
if (CMAKE_GENERATOR STREQUAL "Ninja")
	check_cxx_compiler_flag ("-fdiagnostics-color=always" F_DIAGNOSTIC_COLOR_ALWAYS)
	if (F_DIAGNOSTIC_COLOR_ALWAYS)
		add_compile_options ("-fdiagnostics-color=always")
	endif ()
endif ()

set (CMAKE_XCODE_ATTRIBUTE_CLANG_ENABLE_OBJC_ARC "YES")
set (CMAKE_FIND_FRAMEWORK "LAST")

# Output
if (TE_64BIT)
	set(TE_OUTPUT_DIR_PREFIX x64)
else ()
	set(TE_OUTPUT_DIR_PREFIX x86)
endif ()

set (TE_BINARY_OUTPUT_DIR ${PROJECT_SOURCE_DIR}/bin/${TE_OUTPUT_DIR_PREFIX})
set (TE_LIBRARY_OUTPUT_DIR ${PROJECT_SOURCE_DIR}/lib/${TE_OUTPUT_DIR_PREFIX})

if (TE_TOP_LEVEL)
	set (CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${TE_BINARY_OUTPUT_DIR}/Debug)
	set (CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO ${TE_BINARY_OUTPUT_DIR}/RelWithDebInfo)
	set (CMAKE_RUNTIME_OUTPUT_DIRECTORY_MINSIZEREL ${TE_BINARY_OUTPUT_DIR}/MinSizeRel)
	set (CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${TE_BINARY_OUTPUT_DIR}/Release)

	set (CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG ${TE_BINARY_OUTPUT_DIR}/Debug)
	set (CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO ${TE_BINARY_OUTPUT_DIR}/RelWithDebInfo)
	set (CMAKE_LIBRARY_OUTPUT_DIRECTORY_MINSIZEREL ${TE_BINARY_OUTPUT_DIR}/MinSizeRel)
	set (CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE ${TE_BINARY_OUTPUT_DIR}/Release)

	set (CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${TE_LIBRARY_OUTPUT_DIR}/Debug)
	set (CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELWITHDEBINFO ${TE_LIBRARY_OUTPUT_DIR}/RelWithDebInfo)
	set (CMAKE_ARCHIVE_OUTPUT_DIRECTORY_MINSIZEREL ${TE_LIBRARY_OUTPUT_DIR}/MinSizeRel)
	set (CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${TE_LIBRARY_OUTPUT_DIR}/Release)

	set_property (GLOBAL PROPERTY USE_FOLDERS TRUE)
endif()